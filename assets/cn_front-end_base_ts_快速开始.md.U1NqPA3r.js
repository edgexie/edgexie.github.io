import{_ as s,N as a,M as i,aF as n}from"./chunks/framework.wLg4U0bT.js";const b=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"cn/front-end/base/ts/快速开始.md","filePath":"cn/front-end/base/ts/快速开始.md","lastUpdated":1721641789000}'),t={name:"cn/front-end/base/ts/快速开始.md"},e=n(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><h2 id="tslint-已经废弃" tabindex="-1">tslint 已经废弃 <a class="header-anchor" href="#tslint-已经废弃" aria-label="Permalink to &quot;tslint 已经废弃&quot;">​</a></h2><p>在使用现代的 TypeScript 项目中，通常不再需要 tslint 了。TSLint 已经被弃用，官方推荐迁移到 ESLint。ESLint 是一个更加通用和强大的工具，并且有很好的 TypeScript 支持。</p><h2 id="npm-安装的-eslint-和-vscode-的-eslint-有什么区别" tabindex="-1">npm 安装的 eslint 和 vscode 的 eslint 有什么区别 <a class="header-anchor" href="#npm-安装的-eslint-和-vscode-的-eslint-有什么区别" aria-label="Permalink to &quot;npm 安装的 eslint 和 vscode 的 eslint 有什么区别&quot;">​</a></h2><p>npm 安装的 eslint 在编译阶段检测，而 vscode 的 eslint 是在编辑阶段检测。</p><h2 id="初始化项目" tabindex="-1">初始化项目 <a class="header-anchor" href="#初始化项目" aria-label="Permalink to &quot;初始化项目&quot;">​</a></h2><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-starter</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 创建项目文件夹</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-starter</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 进入项目文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 初始化项目</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 安装依赖</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 初始化 tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eslint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 初始化 eslint</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="区分是-tslint-报错还是-ts-报错" tabindex="-1">区分是 tslint 报错还是 ts 报错 <a class="header-anchor" href="#区分是-tslint-报错还是-ts-报错" aria-label="Permalink to &quot;区分是 tslint 报错还是 ts 报错&quot;">​</a></h2><p>不应该在书写代码遇到 TSLint 报错就修改规则，而是应该根据规则去修改代码。</p><h2 id="类型声明文件" tabindex="-1">类型声明文件 <a class="header-anchor" href="#类型声明文件" aria-label="Permalink to &quot;类型声明文件&quot;">​</a></h2><p>一些 JS 库的作者已经使用 TypeScript 进行了重写，有些则是提供了声明文件，一些作者没有提供声明文件的，大部分库都有社区的人为他们补充了声明文件，如果使用了自身没有提供声明文件的库时，可以使用<code>npm install @types/{模块名}</code>来安装</p>`,11),l=[e];function p(h,r,d,k,c,o){return i(),a("div",null,l)}const m=s(t,[["render",p]]);export{b as __pageData,m as default};
