import{_ as s,N as i,M as a,aF as n}from"./chunks/framework.wLg4U0bT.js";const g=JSON.parse('{"title":"变量","description":"","frontmatter":{},"headers":[],"relativePath":"cn/back-end/java/变量.md","filePath":"cn/back-end/java/变量.md","lastUpdated":1719277083000}'),l={name:"cn/back-end/java/变量.md"},e=n(`<h1 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h1><p>所有的变量在使用前必须先声明。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b, c;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明三个变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明三个变量并初始化</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="参数变量" tabindex="-1">参数变量 <a class="header-anchor" href="#参数变量" aria-label="Permalink to &quot;参数变量&quot;">​</a></h2><p>如果参数变量是值传递，传递的是实际参数的副本，而不是变量的地址。当修改副本时，不会影响原来的变量。</p><p>如果参数变量是引用传递，传递的是变量的地址，而不是变量的值。当修改变量时，会影响原来的变量。</p><p>规则与 js 一致。</p><h2 id="局部变量" tabindex="-1">局部变量 <a class="header-anchor" href="#局部变量" aria-label="Permalink to &quot;局部变量&quot;">​</a></h2><p>局部变量的生命周期从声明时开始，到方法、构造方法或代码块执行结束时终止。之后将被垃圾回收。</p><p>必须先初始化，java 不会为局部变量分配默认值。</p><h2 id="成员变量" tabindex="-1">成员变量 <a class="header-anchor" href="#成员变量" aria-label="Permalink to &quot;成员变量&quot;">​</a></h2><p>对象被实例化后，每个成员变量的值就跟着确定了。</p><p>有默认值。</p><p>一般情况下把成员变量声明为 private，然后提供 getter 和 setter 方法。</p><p>在静态方法以及其他类中，使用完全限定名：<code>ObjectReference.memberName</code>，来访问。</p><h2 id="类变量-静态变量" tabindex="-1">类变量（静态变量） <a class="header-anchor" href="#类变量-静态变量" aria-label="Permalink to &quot;类变量（静态变量）&quot;">​</a></h2><p>Java 中的静态变量是指在类中定义的变量，它与类相关而不是与实例相关，即无论创建多少个类实例，静态变量在内存中只有一份拷贝，被所有实例共享。</p><p>静态变量在类加载时被创建，在整个程序运行期间都存在。</p><h3 id="静态变量的线程安全性【to-do】" tabindex="-1">静态变量的线程安全性【TO DO】 <a class="header-anchor" href="#静态变量的线程安全性【to-do】" aria-label="Permalink to &quot;静态变量的线程安全性【TO DO】&quot;">​</a></h3><h2 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h2><p><a href="https://www.runoob.com/java/java-modifier-types.html" target="_blank" rel="noreferrer">参考</a></p><h3 id="访问修饰符" tabindex="-1">访问修饰符 <a class="header-anchor" href="#访问修饰符" aria-label="Permalink to &quot;访问修饰符&quot;">​</a></h3><ul><li><code>pakcage-private</code> (默认) 类、方法或变量仅对同一个包中的其他类可见。包外的类无法访问。</li><li><code>public</code> 类、方法或变量对同一个包中的其他类和包外的类都可见。</li><li><code>private</code> 类、方法或变量仅对同一个类可见。</li><li><code>protected</code> 类、方法或变量对同一个包中的其他类和包外的类都可见，对子类可见。</li></ul><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一包内</th><th>子孙类（同一包）</th><th>子孙类（不同包）</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>package-private</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>注意：</p><ul><li>main 必须是 public</li><li>private 的成员变量，只能提供 getter 和 setter 方法来访问</li><li>接口及接口的成员变量和成员方法不能申明为 protected</li></ul><h3 id="非访问修饰符" tabindex="-1">非访问修饰符 <a class="header-anchor" href="#非访问修饰符" aria-label="Permalink to &quot;非访问修饰符&quot;">​</a></h3><h4 id="static" tabindex="-1">static <a class="header-anchor" href="#static" aria-label="Permalink to &quot;static&quot;">​</a></h4><ul><li>静态变量是类变量，不是实例变量，无论创建多少个实例，静态变量在内存中只有一份拷贝，被所有实例共享。</li><li>静态方法只能访问静态变量，不能访问实例变量。</li></ul><h4 id="final" tabindex="-1">final <a class="header-anchor" href="#final" aria-label="Permalink to &quot;final&quot;">​</a></h4><ul><li><code>final</code> 修饰的变量不能被修改，必须显示初始化。</li><li><code>final</code> 方法不能被重写。</li><li><code>final</code> 类不能被继承。</li></ul><h4 id="abstract" tabindex="-1">abstract <a class="header-anchor" href="#abstract" aria-label="Permalink to &quot;abstract&quot;">​</a></h4><ul><li>抽象类不能被实例化，唯一目的是将来对该类进行扩充。</li><li>一个类不能同时被 <code>abstract</code> 和 <code>final</code> 修饰。</li><li>如果一个类包含抽象方法，则该类必须声明为抽象类。</li><li>抽象方法必须被子类重写。</li><li>抽象方法不能声明成 <code>final</code> 和 <code>static</code>。</li></ul><h4 id="synchronized-同步的" tabindex="-1">synchronized （同步的） <a class="header-anchor" href="#synchronized-同步的" aria-label="Permalink to &quot;synchronized （同步的）&quot;">​</a></h4><ul><li>同步方法只能被同一时刻一个线程访问，其他线程等待。</li></ul><h4 id="transient-临时的" tabindex="-1">transient （临时的） <a class="header-anchor" href="#transient-临时的" aria-label="Permalink to &quot;transient （临时的）&quot;">​</a></h4><p>在 Java 中，<code>transient</code> 关键字用于修饰那些不希望被序列化的字段。序列化是将对象的状态转换成字节流的过程，以便将对象存储到文件中或者通过网络传输。当一个对象被序列化时，所有的非 <code>transient</code> 字段都会被序列化并存储，而 <code>transient</code> 字段则会被忽略，不会保存它们的值。</p><h4 id="使用-transient-的场景" tabindex="-1">使用 <code>transient</code> 的场景 <a class="header-anchor" href="#使用-transient-的场景" aria-label="Permalink to &quot;使用 \`transient\` 的场景&quot;">​</a></h4><p>以下是一些常见的使用 <code>transient</code> 关键字的场景：</p><ol><li><strong>敏感数据</strong>：例如密码或其他敏感信息，不希望这些信息在序列化过程中被保存下来。</li><li><strong>派生数据</strong>：一些字段可以通过其他字段计算得出，不需要保存这些字段的值，只需在反序列化后重新计算即可。</li><li><strong>大数据字段</strong>：有些字段包含大量数据，不需要保存这些数据，只需在需要时重新生成这些数据。</li></ol><h4 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h4><p>下面是一个简单的示例，展示如何使用 <code>transient</code> 关键字：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serialVersionUID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String username;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> transient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String password;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Username: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Password: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TransientExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        User user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;john_doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;secret123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 序列化对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ObjectOutputStream oos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.ser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 反序列化对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ObjectInputStream ois </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user.ser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            User deserializedUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (User) ois.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deserialized User: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deserializedUser);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException | ClassNotFoundException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>在这个示例中，<code>User</code> 类包含两个字段：<code>username</code> 和 <code>password</code>。<code>password</code> 字段被标记为 <code>transient</code>，因此它不会被序列化。程序输出反序列化后的 <code>User</code> 对象时，<code>password</code> 字段将是 <code>null</code>。</p><h4 id="输出结果" tabindex="-1">输出结果 <a class="header-anchor" href="#输出结果" aria-label="Permalink to &quot;输出结果&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TransientExample.java</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> transientExample</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出结果</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deserialized</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> User:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Username:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> john_doe,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Password:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如上所示，<code>password</code> 字段在反序列化后变为了 <code>null</code>，因为它在序列化过程中被忽略了。</p><h4 id="volatile" tabindex="-1">volatile <a class="header-anchor" href="#volatile" aria-label="Permalink to &quot;volatile&quot;">​</a></h4><p>【GPT】 volatile 修饰的成员变量的能力用全局变量也可以实现，有什么区别？</p><p>在 Java 中，<code>volatile</code>关键字用于修饰成员变量，以确保线程之间的可见性和有序性。虽然全局变量可以在一定程度上实现线程之间的共享，但<code>volatile</code>和全局变量有着不同的作用和使用场景。以下是一些关键的区别和<code>volatile</code>关键字的作用：</p><ol><li><p><strong>可见性保证</strong>：</p><ul><li><strong><code>volatile</code>关键字</strong>：当一个变量被声明为<code>volatile</code>时，线程对该变量的写操作会立即被刷新到主内存中，且对该变量的读操作会从主内存中读取。这确保了所有线程对这个变量的可见性。</li><li><strong>全局变量</strong>：全局变量本身并不能确保线程对其修改的可见性。如果一个线程修改了一个全局变量，其他线程不一定能立即看到变化，除非显式地使用同步机制。</li></ul></li><li><p><strong>有序性保证</strong>：</p><ul><li><strong><code>volatile</code>关键字</strong>：<code>volatile</code>还保证了变量的操作不会被指令重排序（instruction reordering）优化打乱。这对某些情况下的正确性至关重要。例如，在双重检查锁定（Double-checked locking）实现单例模式时，<code>volatile</code>可以防止指令重排序带来的线程安全问题。</li><li><strong>全局变量</strong>：全局变量不能保证操作的有序性。如果需要保证顺序性，仍然需要使用同步机制（如<code> synchronized</code>关键字或<code>Lock</code>类）。</li></ul></li><li><p><strong>使用场景</strong>：</p><ul><li><strong><code>volatile</code>关键字</strong>：适用于需要简单标志变量（flag）的场景，如停止线程的标志、状态指示等。这种情况下，使用<code>volatile</code>可以避免复杂的同步机制，降低性能开销。</li><li><strong>全局变量</strong>：适用于共享数据或状态较多且复杂的场景，这些场景下往往需要更严格的同步控制。全局变量通常与其他同步机制（如锁）结合使用，以确保线程安全。</li></ul></li><li><p><strong>性能</strong>：</p><ul><li><strong><code>volatile</code>关键字</strong>：相比同步机制，<code>volatile</code>提供了一种轻量级的同步手段，不涉及锁定和上下文切换，性能开销较小。</li><li><strong>全局变量</strong>：如果需要保证线程安全，全局变量通常需要额外的同步机制，这些机制可能带来较大的性能开销。</li></ul></li></ol><p>总结来说，<code>volatile</code>关键字提供了一种简单、高效的方式来确保线程之间的可见性和有序性，而全局变量本身并不能保证这些特性。如果一个变量在多个线程之间共享，并且需要保证其最新状态对所有线程可见且操作顺序不被打乱，<code>volatile</code>是一个非常合适的选择。</p>`,52),t=[e];function p(h,r,k,d,o,c){return a(),i("div",null,t)}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
