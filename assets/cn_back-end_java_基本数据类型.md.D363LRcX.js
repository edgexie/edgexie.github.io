import{_ as a,N as i,M as s,aF as e}from"./chunks/framework.wLg4U0bT.js";const g=JSON.parse('{"title":"基本数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"cn/back-end/java/基本数据类型.md","filePath":"cn/back-end/java/基本数据类型.md","lastUpdated":1721138052000}'),l={name:"cn/back-end/java/基本数据类型.md"},n=e(`<h1 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h1><p>内置数据类型和引用数据类型。<code>char</code> 赋值用单引号，<code>String</code> 赋值用双引号。</p><h2 id="内置数据类型" tabindex="-1">内置数据类型 <a class="header-anchor" href="#内置数据类型" aria-label="Permalink to &quot;内置数据类型&quot;">​</a></h2><ol><li><code>byte</code> 8 位，有符号。-128 ~ 127。</li><li><code>short</code> 16 位，有符号。-32768 ~ 32767。</li><li><code>int</code> 32 位，有符号。-2147483648 ~ 2147483647。</li><li><code>long</code> 64 位，有符号。-9223372036854775808 ~ 9223372036854775807。默认值：0L。</li><li><code>float</code> 32 位，有符号，单精度。1 符号位，8 位的指数，23 位的精度。默认值：0.0f。</li><li><code>double</code> 64 位，有符号，双精度。1 符号位，11 位的指数，52 位的精度。默认值：0.0d。</li><li><code>char</code> 16 位，无符号，字符。65535。默认值：&#39;\\u0000&#39;。</li><li><code>boolean</code> 1 位，布尔值。true 或 false。默认值：false。</li></ol><h2 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h2><ol><li>String 字符串。</li><li>数组。</li><li>对象。</li></ol><h2 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h2><p>常量用大写变量命名，使用 final 修饰。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAX_NUM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> octal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 八进制 前缀0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hexa </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 十六进制 前缀0x</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="自动类型转换" tabindex="-1">自动类型转换 <a class="header-anchor" href="#自动类型转换" aria-label="Permalink to &quot;自动类型转换&quot;">​</a></h2><p>规则：</p><ol><li>不能对 boolean 类型进行自动类型转换。</li><li>不能把对象转换成不相关的对象。</li><li>把容量大的类型转换成容量小的类型，会丢失精度，且必须使用强制类型转换。</li></ol>`,12),t=[n];function h(p,d,r,o,k,c){return s(),i("div",null,t)}const E=a(l,[["render",h]]);export{g as __pageData,E as default};
